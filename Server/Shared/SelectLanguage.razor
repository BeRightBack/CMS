@using Microsoft.AspNetCore.Builder
@using Microsoft.Extensions.Options
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.Localization
@using System.Collections.Generic;


@inject HttpContextAccessor HttpContext


@inject IOptions<RequestLocalizationOptions> LocOptions
@{
    IRequestCultureFeature requestCulture = HttpContext.Context.Features.Get<IRequestCultureFeature>();

    //var uri = new Uri(NavigationManager.Uri)
    //.GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);

    var cultureItems = LocOptions.Value.SupportedUICultures
    .Select(e => new SelectListItem { Value = e.Name, Text = e.DisplayName })
    .ToList();


    //var returnUrl = uri;


}

<h3>@lng("Language")</h3>&nbsp;
<select @onchange="ChangeCulture">
    <option value="">Culture</option>
    @foreach (var item in cultureItems)
    {
        <option value="@item.Value">@item.Text</option>
    }
</select>



@code {
    private void ChangeCulture(ChangeEventArgs e)
    {
        var culture = (string)e.Value;
        var uri = new Uri(NavigationManager.Uri)
            .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var query = $"?culture={Uri.EscapeDataString(culture)}&" +
            $"redirectUri={Uri.EscapeDataString(uri)}";

        NavigationManager.NavigateTo("/Culture/SetCulture" + query, forceLoad: true);
    }

    string lng(string txt)
    {
        var msg = @SharedLocalizer.GetLocalizedHtmlString(txt);
        return msg;
    }
}
